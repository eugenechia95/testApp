<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<title>ghShot - Projects</title>

	<link href="../../../css/bootstrap.min.css" rel="stylesheet">

	<!-- temporary hack for the paths?? it has something to do with the routing @.@ -->
	<script type="text/javascript" src="../../../js/lib/d3.v3.min.js"></script>
	<!-- <script type="text/javascript" src="../../../js/lib/three.min.js"></script>
	<script type="text/javascript" src="../../../js/OrbitControls.js"></script> -->
	<script type="text/javascript" src="../../../js/lib/jquery-1.11.3.js"></script>

	<style>
	* {
		box-sizing: border-box;
		-moz-box-sizing: border-box;
		}

		.node {
			cursor: pointer;
		}

		.node circle {
			fill: #fff;
			stroke: steelblue;
			stroke-width: 1px;
		}

		.node text {
			font: 12px sans-serif;
		}

		.link {
			fill: none;
			stroke: #ccc;
			stroke-width: 2px;
		}

#helloTree {
	position:static;
	top: 0px;
	/* width: 100px; height:100px; */
	padding: 5px;
}

		#content {
			position: absolute;
			top: 0px; width: 100%;
			z-index: 1;
			padding: 0 0 0 0;
		}

		a {
			color: #0080ff;
		}

		#c {
			position: fixed;
			width: 100%; height:100%; left:0px;
		}

		.list-item {
			display: inline-block;
			margin: 1em;
			padding: 1em;
			box-shadow: 1px 2px 4px 0px rgba(0,0,0,0.25);
		}

		.list-item .scene {
			width: 400px;
			height: 300px;
		}

		.list-item .description {
			color: #888;
			font-family: sans-serif;
			font-size: large;
			width: 200px;
			margin-top: 0.5em;
		}

		form * {
			display: block;
			margin: 10px;
		}

		.panel-body {
		background:#dfdfdf;}

		#mainViewContainer {
			width: 95%;
			height: 95%;
			border: 1px solid #D3D3D3;
			margin: 10px;
			padding: 3px;
			overflow: hidden;
		}

		#mainView {
			width: 100%;
			height: 100%;
			min-height: 100%;
			display: inline;
		}

		.thumbViewClass {
			border: 1px solid #D3D3D3;
			position: absolute;
			bottom: 5px;
			left: 5px;
			width: 20%;
			height: 30%;
			margin: 3px;
			padding: 3px;
			overflow: hidden;
		}

		#thumbView {
			z-index: 110;
			background: white;
		}

		#scopeContainer {
			z-index: 120;
		}
		.loader {
	position: absolute;
	left:calc(50vw - 25px);
	top:calc(50vh - 25px);
	align-content: center;
  border: 5px solid #f3f3f3; /* Light grey */
  border-top: 5px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 50px;
  height: 50px;
	-webkit-animation: spin 1s linear infinite; /* Safari */
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
		</style>

	</head>

	<body>
			<div class="loader"></div>
			<div class="panel panel-default">
				<div class="panel-body">
					<div class="row">
            <div class="col-md-10" id="topPanel_col1"></div>
						<div class="col-md-2" id="topPanel_col2"></div>
        </div>
				</div>
			</div>
		<!-- <div>
			<input type="checkbox" id="checkMergeBtn"/>
			<input type="submit" name="mergeBtn" class="inputButton" id="mergeBtn" value=" Merge " disabled/>
			&nbsp;&nbsp;<input type="checkbox" id="onConflictUseOlder"> Use Older Base (Default = Use Newer)</input>
		</div> -->
		<div id="helloTree"> </div>

		<!-- <div id="mainViewContainer">
      <embed id="mainView" type="image/svg+xml" src="../../../images/tiger.svg"/>
    </div> -->

    <!-- <div id="thumbViewContainer">
      <svg id="scopeContainer" class="thumbViewClass">
        <g>
          <rect id="scope" fill="red" fill-opacity="0.1" stroke="red" stroke-width="2px" x="0" y="0" width="0" height="0"/>
          <line id="line1" stroke="red" stroke-width="2px" x1="0" y1="0" x2="0" y2="0"/>
          <line id="line2" stroke="red" stroke-width="2px" x1="0" y1="0" x2="0" y2="0"/>
        </g>
      </svg>
      <embed id="thumbView" type="image/svg+xml" src="../../../images/sample.svg" class="thumbViewClass"/>
    </div> -->

		<div id="mainViewContainer">
		    <!-- <svg id="mainView" viewBox="0 0 900 800"><rect fill="#00000", x="10"  y="20" width="900" height="800"></rect></svg> -->

		</div>

		<div id="thumbViewContainer">
		  <svg id="scopeContainer" class="thumbViewClass">
		    <g>
		      <rect id="scope" fill="red" fill-opacity="0.1" stroke="red" stroke-width="2px" x="0" y="0" width="0" height="0"/>
		      <line id="line1" stroke="red" stroke-width="2px" x1="0" y1="0" x2="0" y2="0"/>
		      <line id="line2" stroke="red" stroke-width="2px" x1="0" y1="0" x2="0" y2="0"/>
		    </g>
		  </svg>
		  <!-- <svg id="thumbView" class="thumbViewClass"><rect fill="#00000", x="10"  y="20" width="900" height="800"></rect></svg> -->
		</div>

    <script src="../../../js/lib/lodash.js"></script>
    <script src="../../../js/svg-pan-zoom.js" type="text/javascript" ></script>
    <script src="../../../js/thumbnailViewer.js" type="text/javascript" ></script>
		<!-- <script src="../../../js/downloadDoc.js" type="text/javascript" ></script>
		<script src="../../../js/mergeDoc.js" type="text/javascript" ></script>
		<script src="../../../js/lib/fileSaver.js" type="text/javascript"></script> -->

		<script type="text/javascript">
		var docDownloadList = [];

		var getghDoc = function(id) {
			return new Promise(function (resolve, reject){
				var request = new XMLHttpRequest();
				request.open('GET', '/getghDoc?id='+id+'&project='+project, true);
				request.onload = function() {
					if(request.status >= 200 && request.status < 400) {
						resolve(request.responseText);
					}
					else {
						reject("error");
					}
				};
				request.onerror = function() {
				};
				request.send();
			});
		};

		// BELOW BUNCH ARE COMMENTED BECAUSE WE DO NOT USE MERGING YET
		// var checker = document.getElementById('checkMergeBtn');
		// var sendbtn = document.getElementById('mergeBtn');
		// checker.onchange = function() {
		//  	if (this.checked)
		// 	{
		//   	sendbtn.disabled = false;
		// 		svg.selectAll("g#clickNodeHREF").attr("hidden",true)//.style.display = none;
		// 		svg.selectAll("g#addtoCartList").attr("hidden",null)//.style.display = block;
		// 		//.remove()
		// 		//update(root)
		// 	}
		//   else
		// 	{
		//   	sendbtn.disabled = true;
		// 		//svg.selectAll("g#addtoCartList").remove()//.classed('addtoCartList', true);
		// 		svg.selectAll("g#addtoCartList").attr("hidden",true)//.style.display = none;
		// 		svg.selectAll("g#clickNodeHREF").attr("hidden",null)//style.display = block;
		// 		//update(root)
		// 	}
		//
		// };
		//
		// var ghDocStringList = [];
		// $( "#mergeBtn" ).click(function() {
		//
		// 	//DO SOMETHING WITH WHICH VERSION TO USE ON CONFLICT
		// 	// var checkedOlderBase = document.getElementsByClassName('onConflictUseOlder');
    //   // if(checkedNewBase.checked){
		// 	//
    //   // }
		//
		// 	async function getGHDocList () {
		//
		// 	  for (item of docDownloadList) {
		// 	    result = await getghDoc(item);
		// 			ghDocStringList.push(result);
		// 	  }
		//
		// 		//console.log(ghDocStringList[0])
		// 		mergeDoc();
		// 	}
		//
		// 	getGHDocList ();
		// 	// for (var i = 0; i < docDownloadList.length; i++) {
		// 	// 	getghDoc(docDownloadList[i]).then(function(design) {
		// 	// 		//design consist of ghstring..
		// 	// 	ghDocStringList.push(design);
		// 	// 	});
		// 	// }
		//
		//
		// 	//since it is parallel process, the string list should follow the downloadList
		// 	//same index, not jumbled up
		// 	//console.log(ghDocStringList[0])
		// 	//mergeDoc();
		//
		// });


		// var username = window.location.href.split('/')[4]
		// var loggedInUser = <%- JSON.stringify(data.username) %>;
		var username = "vc"
		var loggedInUser = "vc"

		//perhaps don't need to send the data?
		var project = <%- JSON.stringify(data.project) %>;


		//populateTopPanel
		var urlModif = window.location.href.split('/');
		var projectStringURL = 'http://' + urlModif[2] + '/' + urlModif[3] + '/' + urlModif[4] + '/' + urlModif[5]
		col1Txt = '<p> <a class="button" href="../../../" >Project List </a> > <i>Current Project:</i> <b><a class="button" href="' + projectStringURL + '" >' + project + '</a> </b>'
		col1Txt += ' > <i>Go to:</i> <b><a class="button" href="' + projectStringURL + '/graph" >' + "graphView" + '</a> </b></p>'

		$('#topPanel_col1').append(col1Txt);
		$('#topPanel_col2').append('<p>WELCOME <a>' + loggedInUser + '</a></p>');

		</script>


		<script>

		function computeSvgSizeFromData(config){

  var tree = d3.layout.tree(),
    nodes = tree.nodes(config.data);

  var maxTreeChildrenHeight = {},
    maxTreeHeight = 0,
    maxTreeDepth = 0,
    minSvgWidth,
    minSvgHeight;

  // Compute the max tree depth(node which is the lowest leaf)
  nodes.forEach(function(d) {
      if(d.depth>maxTreeDepth){
          maxTreeDepth = d.depth;
      }

      if(!maxTreeChildrenHeight[d.depth]){
          maxTreeChildrenHeight[d.depth] = 0;
      }

      maxTreeChildrenHeight[d.depth] = maxTreeChildrenHeight[d.depth]+1;
  });

  // Compute maximum number of vertical at a level
  maxTreeHeight = _.max(_.values(maxTreeChildrenHeight));

  // Since this is a horizontal tree, compute the width
  // based upon the depth and the height based upon
  // the number of nodes at a depth level
  minSvgWidth = maxTreeDepth*100 < config.width ? config.width : (maxTreeDepth+1)*100;
  minSvgHeight = maxTreeHeight*80 < config.height ? config.height : (maxTreeHeight+1)*80;

  return {
    width: minSvgWidth,
    height: minSvgHeight
  };
}


		// ************** Generate the tree diagram	 *****************
		var margin = {top: 20, right: 120, bottom: 20, left: 120},
		Dwidth = 960 - margin.right - margin.left,
		Dheight = 500 - margin.top - margin.bottom;


		var i = 0,
		duration = 750,
		root;

		var nodeWidth = 90;
		var nodeHeight = 30;
		var horizontalSeparationBetweenNodes = 0;
		var verticalSeparationBetweenNodes = 0;

		var tree = d3.layout.tree()
		.nodeSize([nodeWidth + horizontalSeparationBetweenNodes, nodeHeight + verticalSeparationBetweenNodes])
		//.separation(function(a, b) { return a.parent == b.parent ? 1 : 1.25; })
//		.size([Dheight, Dwidth]);

var tree2 = d3.layout.tree()
.nodeSize([nodeWidth + horizontalSeparationBetweenNodes, nodeHeight + verticalSeparationBetweenNodes])
//.separation(function(a, b) { return a.parent == b.parent ? 1 : 0.5; })
//.size([Dheight, Dwidth]);

		var diagonal = d3.svg.diagonal()
		.projection(function(d) { return [d.y, d.x]; });

// var actualWidth2 = 1200, actualHeight2 = 1760;
		var svg = d3.select("body").append("svg")
    .remove()//document.createElementNS(d3.ns.prefix.svg, 'svg')
		//var svg = d3.select("#mainViewContainer").append("svg")
		// .attr("width", Dwidth + margin.right + margin.left)
		// .attr("height", Dheight + margin.top + margin.bottom)
		//.remove()
		// .attr("width",actualWidth2)
		// .attr("height", actualHeight2)
		.attr("id","historyTree")
		.append("g")
		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		var svg2 = d3.select("body").append("svg")
    .remove()
		//d3.select("#thumbViewContainer").append("svg")
		// .attr("width", Dwidth + margin.right + margin.left)
		// .attr("height", Dheight + margin.top + margin.bottom)
		// .attr("width",actualWidth2)
		// .attr("height", actualHeight2)
		// .attr("id","historyTree2")
		.append("g")
		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		//d3.select(self.frameElement).style("height", "500px");
		var nodes;
		function update(source) {

			// Compute the new tree layout.
			nodes = tree.nodes(root),//.reverse(),
			links = tree.links(nodes);

			// Normalize for fixed-depth.
			nodes.forEach(function(d) { d.y = d.depth * 180; });

			// Update the nodes…
			var node = svg.selectAll("g.node")
			.data(nodes, function(d) { return d.id || (d.id = ++i); });

			// Enter any new nodes at the parent's previous position.
			var nodeEnter = node.enter().append("g")
			.attr("class", "node")
			.attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
			//.on("click", click); //disable onclick for now

			nodeEnter //clickable circle
			.append("circle")
			.attr("r", 40)
			//.attr("class", "clickable")
			.style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

			//TODO: MOVE IMAGE SO THAT LINK IS CLICKABLE
			nodeEnter.append("image")
      .attr("href", function(d) { return d.data.image; })
			.attr("x", -100)
			.attr("y", -100);
			//.style("border-radius",0.5);

			nodeEnter.append("text")
			.attr("x", function(d) { return d.children || d._children ? -50 :40; })
			.attr("dy", ".35em")
			.attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
			.text(function(d) { return d._id; })//d.name //d._id
			.style("fill-opacity", 1e-6);

			nodeEnter.append("text")
			.attr("x", function(d) { return d.children || d._children ? -50 : 40; })
			.attr("dy", ".15em")
			.attr("y", 15)
			.attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
			.text(function(d) { return d.created_by; })//d.name //d._id
			.style("fill-opacity", .5);

			//clickable link
			// if(!checker.checked)
			// {
				nodeEnter
						.append("g")
						.attr("id", "clickNodeHREF")
			      .append("a")
			       .attr("xlink:href", function (d) {
							 return '../' + projectName + '/design/' + d._id; })
			      //.attr("xlink:href", function (d) { return './design/' + d._id; })
						.append("circle")
			          //.attr("class", "clickable")
			          //.attr("y", -6)
			          //.attr("x", function (d) { return d.children || d._children ? -110 : 50; })
			          //.attr("width", 80) //2*4.5)
			          //.attr("height", 30)
								.attr("r", 40)
			          .style("fill", "lightsteelblue")
								.on("click", function(){ d3.select(this).attr("xlink:href")})
								.style("fill-opacity", 1e-6)        // set to 1e-6 to hide
								;
			// }
			// else
			// {
				//use the node click to add to list
				nodeEnter
						.append("g")
						.attr("id","addtoCartList")
						.append("circle")
								.attr("r", 40)
								.on("click", function(d) {
									var nameIdx = docDownloadList.indexOf(d._id);

									if(nameIdx == -1)
									{
										docDownloadList.push(d._id)
										d3.select(this).style("fill", "lightsteelblue")
										d3.select(this).style("fill-opacity", 0.3)
									}
									else
									{
										docDownloadList.splice(nameIdx,1)
										d3.select(this).style("fill", "lightsteelblue")
										d3.select(this).style("fill-opacity",1e-6)
									}

								}) //add to list
								.style("fill", "lightsteelblue")
								.style("fill-opacity", 1e-6);        // set to 1e-6 to hide

			svg.selectAll("g#addtoCartList").attr("hidden",true)
			//}

			// Transition nodes to their new position.
			var nodeUpdate = node.transition()
			.duration(duration)
			.attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

			nodeUpdate.select("circle")
			.attr("r", 40)
			.style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

			nodeUpdate.select("text")
			.style("fill-opacity", 1);

			// Transition exiting nodes to the parent's new position.
			var nodeExit = node.exit().transition()
			.duration(duration)
			.attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
			.remove();

			nodeExit.select("circle")
			.attr("r", 40);

			nodeExit.select("text")
			.style("fill-opacity", 1e-6);

			// Update the links…
			var link = svg.selectAll("path.link")
			.data(links, function(d) { return d.target.id; });

			// Enter any new links at the parent's previous position.
			link.enter().insert("path", "g")
			.attr("class", "link")
			.attr("d", function(d) {
				var o = {x: source.x0, y: source.y0};
				return diagonal({source: o, target: o});
			});

			// Transition links to their new position.
			link.transition()
			.duration(duration)
			.attr("d", diagonal);

			// Transition exiting nodes to the parent's new position.
			link.exit().transition()
			.duration(duration)
			.attr("d", function(d) {
				var o = {x: source.x, y: source.y};
				return diagonal({source: o, target: o});
			})
			.remove();

			// Stash the old positions for transition.
			nodes.forEach(function(d) {
				d.x0 = d.x;
				d.y0 = d.y;
			});

//-----------------------------
// smaller inset tree at the bottom left corner
var nodes2 = tree2.nodes(root),//.reverse(),
links2 = tree2.links(nodes2);

// Normalize for fixed-depth.
nodes2.forEach(function(d) { d.y = d.depth * 180; });

// Update the nodes…
var node2 = svg2.selectAll("g.node")
.data(nodes2, function(d) { return d.id || (d.id = ++i); });

// Enter any new nodes at the parent's previous position.
var nodeEnter2 = node2.enter().append("g")
.attr("class", "node")
.attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
// .on("click", click);

nodeEnter2.append("circle")
.attr("r", 40)
.style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

//TODO: MOVE IMAGE SO THAT LINK IS CLICKABLE
nodeEnter2.append("image")
.attr("href", function(d) { return d.data.image; })
.attr("x", -100)
.attr("y", -100);
//.style("border-radius",0.5);

nodeEnter2.append("text")
.attr("x", function(d) { return d.children || d._children ? -50 :40; })
.attr("dy", ".35em")
.attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
.text(function(d) { return d._id; })//d.name //d._id
.style("fill-opacity", 1e-6);

nodeEnter2.append("text")
.attr("x", function(d) { return d.children || d._children ? -50 : 40; })
.attr("dy", ".15em")
.attr("y", 15)
.attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
.text(function(d) { return d.created_by; })//d.name //d._id
.style("fill-opacity", .5);

//clickable link
nodeEnter2
		.append("a")
		 .attr("xlink:href", function (d) {
			 return '../' + projectName + '/design/' + d._id; })
		//.attr("xlink:href", function (d) { return './design/' + d._id; })
		.append("rect")
				.attr("class", "clickable")
				.attr("y", -6)
				.attr("x", function (d) { return d.children || d._children ? -110 : 50; })
				.attr("width", 80) //2*4.5)
				.attr("height", 30)
				.style("fill", "lightsteelblue")
				.style("fill-opacity", 1e-6)        // set to 1e-6 to hide
				;

// Transition nodes to their new position.
var nodeUpdate2 = node2.transition()
.duration(duration)
.attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

nodeUpdate2.select("circle")
.attr("r", 40)
.style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

nodeUpdate2.select("text")
.style("fill-opacity", 1);

// Transition exiting nodes to the parent's new position.
var nodeExit2 = node2.exit().transition()
.duration(duration)
.attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
.remove();

nodeExit2.select("circle")
.attr("r", 40);

nodeExit2.select("text")
.style("fill-opacity", 1e-6);

// Update the links…
var link2 = svg2.selectAll("path.link")
.data(links, function(d) { return d.target.id; });

// Enter any new links at the parent's previous position.
link2.enter().insert("path", "g")
.attr("class", "link")
.attr("d", function(d) {
	var o = {x: source.x0, y: source.y0};
	return diagonal({source: o, target: o});
});

// Transition links to their new position.
link2.transition()
.duration(duration)
.attr("d", diagonal);

// Transition exiting nodes to the parent's new position.
link2.exit().transition()
.duration(duration)
.attr("d", function(d) {
	var o = {x: source.x, y: source.y};
	return diagonal({source: o, target: o});
})
.remove();

// Stash the old positions for transition.
nodes2.forEach(function(d) {
	d.x0 = d.x;
	d.y0 = d.y;
});
			//$("#mainView").attr('src','../../../images/tiger.svg');
		// $("#mainViewContainer").append('<embed id="mainView" type="image/svg+xml" src="../../../images/tiger.svg"/>')
// $("#thumbViewContainer").append(`  <svg id="scopeContainer" class="thumbViewClass">
// 		<g>
// 			<rect id="scope" fill="red" fill-opacity="0.1" stroke="red" stroke-width="2px" x="0" y="0" width="0" height="0"/>
// 			<line id="line1" stroke="red" stroke-width="2px" x1="0" y1="0" x2="0" y2="0"/>
// 			<line id="line2" stroke="red" stroke-width="2px" x1="0" y1="0" x2="0" y2="0"/>
// 		</g>
// 	</svg>
// <embed id="thumbView" type="image/svg+xml" src="../../../images/sample.svg" class="thumbViewClass"/>
// `)
	//<embed id="thumbView" type="image/svg+xml" src="../../../images/tiger.svg" class="thumbViewClass"/>

	// console.log()


		}

		// Toggle children on click.
		function click(d) {
			if (d.children) {
				d._children = d.children;
				d.children = null;
			} else {
				d.children = d._children;
				d._children = null;
			}
			update(d);
		}

		</script>




		<!-- <script type="text/javascript">
		      thumbnailViewer({mainViewId: 'mainView',thumbViewId: 'thumbView'});
		    </script> -->
			<script>
			function clone_d3_selection(selection, i) {
			            // Assume the selection contains only one object, or just work
			            // on the first object. 'i' is an index to add to the id of the
			            // newly cloned DOM element.
			    var attr = selection.node().attributes;
			    var length = attr.length;
			    var node_name = selection.property("nodeName");
			    var parent = d3.select(selection.node().parentNode);
			    var cloned = parent.append(node_name)
			                 .attr("id", selection.attr("id") + i);
			    for (var j = 0; j < length; j++) { // Iterate on attributes and skip on "id"
			        if (attr[j].nodeName == "id") continue;
			        cloned.attr(attr[j].name,attr[j].value);
			    }
			    return cloned;
			}

			function clone_selection(object, i) {
			  for (j = 0; j < i; j++) {
			    // Here's the solution:
			    cloned_obj = svg.append("use")
			                .attr("xlink:href","#" + object.attr("id"));
			  }
			}


			var getDesignTree = function(id) {
				return new Promise(function (resolve, reject){
					var request = new XMLHttpRequest();
					request.open('GET', '/getDesignTree?username=' + username + '&id='+id, true);

					request.onload = function() {
						if(request.status >= 200 && request.status < 400) {
							resolve(request.responseText);
						}
						else {
							reject("error");
						}
					};

					request.onerror = function() {
					};

					request.send();
				});
			};


			var projectName;
			window.onload = function () {

				console.log("project page loaded")

				getDesignTree(project).then(function(data) {

					var treeData = JSON.parse(data);

					projectName = project

					root = treeData[0];
					root.x0 = Dheight / 2;
					root.y0 = 0;
console.log(treeData[0])
					var config = {
      data: root,
      width : $(window).width(), // Width of the parent container
      height : $(window).height()*0.8, // Height of the parent container
      margin: { // Margins that we need within our SVG
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      },
    };
					var dimensions = computeSvgSizeFromData(config),
						//source = root//config.data,
						actualHeight = dimensions.height,
						actualWidth = dimensions.width;
						//console.log("act", actualWidth, actualHeight)
					update(root);

					$("#mainViewContainer").append('<svg id="mainView" width = "'+$(window).width()+'" height="'+$(window).height()*0.8+'" viewBox="0 0 '+ actualWidth +' '+ actualHeight+ '"></svg>');

				// 	svg.style("width",1200)
				// .style("height", 600);
				 // console.log(d3.select("#historyTree").node())

				 var offsetX = //parseFloat(svg.attr("x"))+
									0//parseFloat(actualWidth/2.0);
		 var offsetY = //parseFloat(600)+
									parseFloat(actualHeight/2.0);

									var scaleValue;
									var heightRatio = ($(window).height()*0.8)/actualHeight*2;
									var widthRatio = $(window).width()/actualWidth*2
									if(heightRatio < widthRatio )
										scaleValue = heightRatio
									else {
										scaleValue = widthRatio
									}

		svg.attr("transform",
									"translate("+offsetX+ ","+offsetY+") "+

									"scale("+scaleValue +") " );//+
									//"translate(-"+offsetX+",-"+offsetY+ ")"
								//);

					$("#mainView").append(svg.node())

					//var pNode = svg.node();
 				 // 		 console.log($(svg.node()).html())
 				 //var pCopy = pNode.cloneNode(true);
				 // pCopy = $("#mainViewContainer svg").clone()
 				 //var pCopy = clone_d3_selection(svg.node(),1)
 				 //var pCopy = clone_selection(svg.node(),1)

 //var pCopy =d3.select('#historyTree').node().cloneNode(true)
									 // console.log(pCopy.html())
					//$("#mainViewContainer").append('<svg width="960" height="500">' + svg.node() + '</svg>')
					// var svgString = '<svg width="960" height="500">' + svg.node().html() + '</svg>'
					// $("#mainViewContainer").append(svgString)
				// document.body.appendChild(svg.node())
				//$("#thumbViewContainer").append('<svg id="thumbView" width = "1090.59" height="513" class="thumbViewClass"></svg>');
$("#thumbViewContainer").append('<svg id="thumbView" class="thumbViewClass"><rect fill="#ffffff", x="0"  y="0" width="'+ actualWidth+'" height="'+actualHeight+'"></rect></svg>');

				//$("#thumbView").append('<g transform="translate(120,20)">' + d3.select(svg.node()).html() + '</g>')
				// $("#thumbView").append(pCopy)
			// 	svg2.style("width", 200)
  		// .style("height", 200);

			svg2.attr("transform",
										"translate("+offsetX+ ","+offsetY+") "+
										"scale("+scaleValue +") " );//+
										//"translate(-"+offsetX+",-"+offsetY+ ")" );

	$("#thumbView").append(svg2.node())
						thumbnailViewer({mainViewId: 'mainView',thumbViewId: 'thumbView'});

				}, function(status) { //error detection....
					alert(status + ' -- Something went wrong. Please try again');
				});

				}
				setInterval(function() {
				if ($("#mainView").length >0) {
					$(".loader").hide();
				}
			})
				</script>


</body>
</html>
